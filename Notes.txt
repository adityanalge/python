____________________________________________________________________________________________________________________________Command prompt Commands

cd - current directory
cd 'Desktop' - to chang directory to Desktop
cd .. - to jump up a directory
cls - to clear screen

____________________________________________________________________________________________________________________________
Data Types

I feel sexy listening to Donald Trump sing bricks
int float string list dictionaries tuples set bool

____________________________________________________________________________________________________________________________
Strings

len(string)

slicing - [start,stop,step]
string [2:] - Goes all the way to the end
string [:3] - Goes all the way to '3 - 1' (Goes upto 3 but doesn't include it )
string [3:6] - Goes from 3-5
string[::] - Goes all the way from beginning to end
string[::2] - Goes in step size of 2
string[2:7:2] - Displays 2 4 6
string[::-1] - Reverses the string (Trick)

indexing and reverse indexing - string index starts with 0 from ahead and -1 from behind
string[0] or string[-1]

Immutability of Strings

strings are immutable
string+string gives us stringstring

methods

string.upper()
string.lower()
string.split('x') - String is split based on letter x. Default split is performed on white space.

.format method

print('The {q} {b} {f}'.format(f='fox',b='brown',q='quick'))
the quick brown fox

print(f"Hello {name}")

____________________________________________________________________________________________________________________________
Lists

list = [a,b,c]
Slicing and Indexing works just like strings

len(list)
list(0)
list[1:]
list+list

Lists are mutable

list.append(6) - add item at end of list
list.pop() - remove last item from list
popped_item = list.pop() 
list.pop(index position) - when you want to remove item from particular index (default index position is -1)

list.sort() - special inplace method that doesn't return anything but sorts a list in place (DOESN'T RETURN ANYTHING)

list.reverse() - reverses a list in place and also doesn't return anything (DOESN'T RETURN ANYTHING)


____________________________________________________________________________________________________________________________
Dictionaries

dicitionaries are mutable

Dictionaries can handle other strings, lists or dictionaries. Keys should always be strings.
d={'k1':100,'k2':200}
d['k3']=300
d['k1']='NEW VALUE'

d.keys() returns all the keys
d.values() returns all the values
d.items() returns all the key value pairs


____________________________________________________________________________________________________________________________
Tuples

t=(a,b,c)
Main difference between tuples and lists is that tuples are immutable

len(t)
Can use slicing and indexing just like lists
t.count('a') returns how many times 'a' appears in tuple
t.index('a') returns the index of very first time that 'a' appears in a tuple 


____________________________________________________________________________________________________________________________
Sets

Sets can only have an unordered collection of unique elements

s = set()

set.add(1) - adds 1 to a set. Looks like a dictionary cause of curly braces but doesn't have key value pairs.

Casting a set to a list only gives us unique values.

set(list)


____________________________________________________________________________________________________________________________
Booleans

True False None


____________________________________________________________________________________________________________________________
I/O with files

%%writefile myfile.txt
Hello this is a text file - Only works in juypter notebook

myfile = open(myfile.txt)
myfile.read() - Returns a giant string of everything thats in the file

if you try to read it again, it returns empty string.
You have to reset the cursor first

myfile.seek(0) - used to reset cursor

myfile.readlines() - each line is returned as a seperate object of a list

myfile = open("Full File Path") - to open a file thats at another location and not the current directory in which jupyter notebook is being used

myfile.close() - to close the file and not get any errors

with open('myfile.txt') as my_new_file:
	contents = my_new_file.read()

____________________________________________________________________________________________________________________________
For Loop

Iterable means you can iterate over the object. 
E.g You can iterate over every char in a string

Tuple Unpacking

mylist = [(1,2),(3,4),(5,6)]

for a,b in mylist:
	print (a)

O/P: 	1
	3
	5

Dictionary Unpacking is similar to tuple unpacking

For loop when used with dictionaries works by default on keys.
To use it on values, we use d.values() or d.keys() to use it on keys.

____________________________________________________________________________________________________________________________

Continue Pass and Break Keywords

We can use break, continue and pass keywords.

Break - breaks out of the current closest enclosing loop
Continue - goes to the top of the closest enclosing loop
pass - does nothing at all (used to remove syntax errors while coding)

Continue is like go to the top of the current loop
Break just stops the loop no matter what

____________________________________________________________________________________________________________________________

Operators

Range

for _ in range(start,stop,step):
	pass

Range is basically a generator that generates information instead of storing it to memory. 
e.g list(range(0,11,2)) - [0,2,4,6,8,10]

Enumerate

word= 'abc'
for item in enumerate(word):
	print(item)

O/P:
	(0,'a')
	(0,'b')
	(0,'c')

We can use tuple unpacking to return index and letter differently

Zip 

Its kinda like the opposite of enumerate

zip(mylist1,mylist2)can be used to join two lists into tuples

In Operator

check if something is in an iterable object types

eg: 'a' in 'a world' - True
    'mykeys' in {'mykey':345} - True

min/max

min(mylist) - returns minimum value in list
max(mylist) - returns maximum value in list

Random

it randomly shuffles around any list

eg:
	from random import shuffle
	shuffle(mylist) - shuffles list in place. 
	(Doesn't Return Anything)
	randint(0,100) - 92 or 8

Input

input is used to ask user for an input

eg. var = input('Enter a number')

Input always excepts anything that is passed as a string.

to cast input, we can use type casting
eg. float(var) or int(var)

can be done in one line by wrapping input

eg. var = int(input('Enter a number'))

____________________________________________________________________________________________________________________________
List Comprehensions

Used to quickly create a list in python. Basically flaten out for loop.

For Loop

str = 'Aditya'
mylist = [x for x in str]

mylist = [num ** 2 for num in range(0,11)]

mylist = [x for x in range(0,11) if x%2==0]

celcius = [0,10,20,34.5]
fah = [((9/5) * temp + 32) for temp in celcius]


If Else

results = [x if x%2==0 else 'odd' for x in range(0,6)]
O/P - [0, 'ODD', 2, 'ODD', 4, 'ODD]

Nested Loop

mylist = [x*y for x in [2,4,6] for y in [1,10,1000]]

____________________________________________________________________________________________________________________________

































































